name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: parkwise_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev --system
        pip install pytest pytest-cov

    - name: Set up environment variables
      run: |
        echo "DJANGO_SECRET_KEY=test_secret_key" >> .env
        echo "DJANGO_DEBUG=True" >> .env
        echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
        echo "DJANGO_CORS_ALLOWED_ORIGINS=http://localhost:5173" >> .env
        echo "POSTGRES_DB=parkwise_test" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test app.test.accounts app.test.parking_lots app.test.reservations app.test.reports --verbosity=2

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        if-no-files-found: error

    - name: Check test coverage
      run: |
        coverage run --source='.' manage.py test app.test.accounts app.test.parking_lots app.test.reservations app.test.reports
        coverage report
        coverage html
        if [ $(echo "$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//') < 80" | bc) -eq 1 ]; then
          echo "Test coverage is below 80%"
          exit 1
        fi 