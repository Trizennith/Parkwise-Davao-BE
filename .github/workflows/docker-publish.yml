name: Docker Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for image availability
        if: github.event_name != 'pull_request'
        run: |
          # Get the latest tag
          LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          # Wait for image to be available (max 5 minutes)
          for i in {1..30}; do
            if docker pull $LATEST_TAG; then
              echo "Image is available in registry"
              exit 0
            fi
            echo "Waiting for image to be available... (attempt $i/30)"
            sleep 10
          done
          echo "Timeout waiting for image to be available"
          exit 1

  deploy:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_DROPLET_HOST }}
          username: ${{ secrets.PRODUCTION_DROPLET_USERNAME }}
          key: ${{ secrets.PRODUCTION_DROPLET_SSH_KEY }}
          script: |
            cd /home/trizen/code/others/smart-parking-davao/back-end
            docker stack deploy -c docker/app.deploy.yml parkwise-davao 